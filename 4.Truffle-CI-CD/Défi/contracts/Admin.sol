//Admin.sol
//SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

import "./Common.sol";

/// @title Un contract pour g√©rer les fonctions de l'administrateur de vote
/// @author Youn√®s Manjal üòé
/// @notice Le contrat fait appelle au mapping whitelist et √† l'enum WorkflowStatus du contrat Common.sol
contract Admin is Common {
    /// @notice Ajout d'une adresse Ethereum √† la liste blanche
    /// @param _address address Ethereum d'un utilisateur ayant le droit de faire une proposition et de voter.
    /// @dev On r√©cup√©re le mapping whitelist qui est d√©finit dans le contrat common.sol
    function addAddressWhitelist(address _address)
        public
        onlyOwner
        requireWorkflowStatus(
            WorkflowStatus.RegisteringVoters,
            "The recording session is no longer in progress"
        )
    {
        require(
            whitelist[_address].isRegistered != true,
            "This address is already whitelisted"
        );
        whitelist[_address].isRegistered = true;
        emit VoterRegistered(_address);
      }

    /// @notice R√©cup√©re un √©lecteur de la liste blanche
    /// @param _address address Ethereum d'un utilisateur de la liste blanche.
    function isWhitelisted(address _address)
        public
        view
        onlyOwner
        returns (Voter memory)
    {
        return whitelist[_address];
    }

    /// @notice D√©marrage de l'enregistrement de propositions
    /// @dev On modifie la valeur de l'enum WorkflowStatus via la variable defaultWorkflowStatus qui est d√©finit dans le contract common.sol
    function startsRecordingProposals() 
            public 
            onlyOwner 
            requireWorkflowStatus(
                WorkflowStatus.RegisteringVoters,
                "There are no proposal registration sessions in progress"
        ) 
    {
        defaultWorkflowStatus = WorkflowStatus.ProposalsRegistrationStarted;
        emit WorkflowStatusChange(
            WorkflowStatus.RegisteringVoters,
            WorkflowStatus.ProposalsRegistrationStarted
        );
    }

    /// @notice On arr√™te la session de l'enregistrement de propositions
    /// @dev On modifie la valeurs de l'enum WorkflowStatus via la variable defaultWorkflowStatus qui est d√©finit dans le contract common.sol
    function stopRecordingProposals()
        public
        onlyOwner
        requireWorkflowStatus(
            WorkflowStatus.ProposalsRegistrationStarted,
            "There are no proposal registration sessions in progress"
        )
    {
        defaultWorkflowStatus = WorkflowStatus.ProposalsRegistrationEnded;
        emit WorkflowStatusChange(
            WorkflowStatus.ProposalsRegistrationStarted,
            WorkflowStatus.ProposalsRegistrationEnded
        );
    }

    /// @notice D√©mmarage de la session de vote
    /// @dev On modifie la valeurs de l'enum WorkflowStatus via la variable defaultWorkflowStatus qui est d√©finit dans le contract common.sol
    function startsVotingSession()
        public
        onlyOwner
        requireWorkflowStatus(
            WorkflowStatus.ProposalsRegistrationEnded,
            "The voting registration session is still in progress"
        )
    {
        defaultWorkflowStatus = WorkflowStatus.VotingSessionStarted;
        emit WorkflowStatusChange(
            WorkflowStatus.ProposalsRegistrationEnded,
            WorkflowStatus.VotingSessionStarted
        );
    }

    /// @notice On arr√™te la session de vote
    /// @dev Le modifier requireWorkflowStatus est d√©finit dans le contrat common.sol
    function stopVotingSession()
        public
        onlyOwner
        requireWorkflowStatus(
            WorkflowStatus.VotingSessionStarted,
            "There is no vote in progress"
        )
    {
        defaultWorkflowStatus = WorkflowStatus.VotingSessionEnded;
        emit WorkflowStatusChange(
            WorkflowStatus.VotingSessionStarted,
            WorkflowStatus.VotingSessionEnded
        );
    }

    /// @notice On comptabilise les votes
    /// @dev Le modifier requireWorkflowStatus est d√©finit dans le contrat common.sol
    function voteTallying()
        public
        onlyOwner
        requireWorkflowStatus(
            WorkflowStatus.VotingSessionEnded,
            "The voting session is still in progress"
        )
    {
        uint256 proposalsVoteCount = 0;

        //DOS WARNING
        for (uint256 i = 0; i < proposals.length; i++) {
            if (proposals[i].voteCount > proposalsVoteCount) {
                proposalsVoteCount = proposals[i].voteCount;
                winningProposalId = i;
            }
        }
        defaultWorkflowStatus = WorkflowStatus.VotesTallied;
        emit WorkflowStatusChange(
            WorkflowStatus.VotingSessionEnded,
            WorkflowStatus.VotesTallied
        );
    }
}
